// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queryOderProducts.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const OrderProductUpdate = `-- name: OrderProductUpdate :exec
update shop.orderproducts op
set quantity = $3
where op.order_id = $1 and op.product_id = $2
`

type OrderProductUpdateParams struct {
	OrderID   int32          `db:"order_id" json:"order_id"`
	ProductID int32          `db:"product_id" json:"product_id"`
	Quantity  pgtype.Numeric `db:"quantity" json:"quantity"`
}

func (q *Queries) OrderProductUpdate(ctx context.Context, arg OrderProductUpdateParams) error {
	_, err := q.db.Exec(ctx, OrderProductUpdate, arg.OrderID, arg.ProductID, arg.Quantity)
	return err
}

const OrderProductsCreate = `-- name: OrderProductsCreate :exec
insert into shop.orderproducts 
(order_id, product_id, quantity)
values ($1, $2, $3)
`

type OrderProductsCreateParams struct {
	OrderID   int32          `db:"order_id" json:"order_id"`
	ProductID int32          `db:"product_id" json:"product_id"`
	Quantity  pgtype.Numeric `db:"quantity" json:"quantity"`
}

func (q *Queries) OrderProductsCreate(ctx context.Context, arg OrderProductsCreateParams) error {
	_, err := q.db.Exec(ctx, OrderProductsCreate, arg.OrderID, arg.ProductID, arg.Quantity)
	return err
}

const OrdersProductsFull = `-- name: OrdersProductsFull :many
select op.order_id, p.name, op.quantity from shop.orderproducts op 
inner join shop.products p on op.product_id = p.id
`

type OrdersProductsFullRow struct {
	OrderID  int32          `db:"order_id" json:"order_id"`
	Name     string         `db:"name" json:"name"`
	Quantity pgtype.Numeric `db:"quantity" json:"quantity"`
}

func (q *Queries) OrdersProductsFull(ctx context.Context) ([]*OrdersProductsFullRow, error) {
	rows, err := q.db.Query(ctx, OrdersProductsFull)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*OrdersProductsFullRow{}
	for rows.Next() {
		var i OrdersProductsFullRow
		if err := rows.Scan(&i.OrderID, &i.Name, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ProductAddOrder = `-- name: ProductAddOrder :exec
insert into shop.Orderproducts 
(order_id, product_id, quantity)
values 
( 
    $1, 
    (select id from shop.products p where p.name = $2),
    $3
)
`

type ProductAddOrderParams struct {
	OrderID  int32          `db:"order_id" json:"order_id"`
	Name     string         `db:"name" json:"name"`
	Quantity pgtype.Numeric `db:"quantity" json:"quantity"`
}

func (q *Queries) ProductAddOrder(ctx context.Context, arg ProductAddOrderParams) error {
	_, err := q.db.Exec(ctx, ProductAddOrder, arg.OrderID, arg.Name, arg.Quantity)
	return err
}
